# -*- coding: utf-8 -*-
"""write_to_db.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18pJ-OJx7n8TPnpxg82ISvXF8xMedBQH2
"""

import psycopg2
from dotenv import load_dotenv
import os
import sqlite3
import pandas as pd

load_dotenv()

db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")
db_url = os.getenv("DB_URL")
db_port = os.getenv("DB_PORT")
db_root_base = os.getenv("DB_ROOT_BASE")

assert db_url

file_url = f"/content/drive/MyDrive/GDSC_dataset/df100.csv"
df = pd.read_csv(file_url)

for col in df.columns:
    if "date" in col.lower():
        df[col] = pd.to_datetime(df[col], errors="coerce")
    elif df[col].dtype == "object":
        df[col] = df[col].astype(str)
    elif df[col].dtype == "float64":
        df[col] = df[col].astype(float)
    elif df[col].dtype == "int64":
        df[col] = df[col].astype(int)

conn_params = {
    'host': db_url,
    'port': db_port,
    'database': db_root_base,
    'user': db_user,
    'password': db_password,
}

table_name = "krasnobaeva"
max_rows = min(100, len(df))
df = df.head(max_rows)

try:
    connection = psycopg2.connect(**conn_params)
    cursor = connection.cursor()
    print("Соединение открыто")


    cursor.execute("SELECT version();")
    db_version = cursor.fetchone()
    print("Версия PostgreSQL:", db_version)


    columns_sql = ",\n    ".join([f'"{col.lower()}" {pg_type}' for col, pg_type in pg_columns.items()])
    create_table_query = f"""
    CREATE TABLE IF NOT EXISTS public.{table_name} (
        id SERIAL PRIMARY KEY,
        {columns_sql}
    );
    """

    cursor.execute(create_table_query)
    connection.commit()
    print(f"Таблица {table_name} успешно создана или уже существует.")

except psycopg2.Error as e:
    print("Ошибка подключения:", e)
    if connection:
        connection.rollback()

try:
    for _, row in df.iterrows():
        values = [None if pd.isna(v) else v for v in row]
        placeholders = ", ".join(["%s"] * len(values))
        columns = ", ".join([f'"{c.lower()}"' for c in df.columns])
        insert_query = f'INSERT INTO public.{table_name} ({columns}) VALUES ({placeholders});'
        cursor.execute(insert_query, values)

    print(f"Вставлено {len(df)} строк в таблицу {table_name}.")

except Exception as e:
    print("Ошибка при работе с базой данных:", e)
    conn.rollback()

finally:
  if connection:
    cursor.close()
    connection.close()
    print('Соединение закрыто')